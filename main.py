import json
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
import sqlite3

# –ó–∞–≥—Ä—É–∑–∫–∞ JSON-—Ñ–∞–π–ª–∞
with open('cats.json', 'r') as file:
    rubricator_data = json.load(file)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token='6178296096:AAE6Rn_8B7mLb9_8L43OIBWR4l3xROjPcMU')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

db = sqlite3.connect('users.db')
cursor = db.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ JSON-–¥–∞–Ω–Ω—ã—Ö
def create_inline_buttons(data):
    buttons = []
    for item in data:
        button = types.InlineKeyboardButton(item['title'], callback_data=str(item['id']))
        buttons.append(button)
    return buttons


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(Command('start'))
async def start_command(message: types.Message):
    await message.reply('–ë–æ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è! üôå\n'
                        '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ. ‚¨á')

    # Check if the user already exists in the database
    cursor.execute("SELECT id FROM viewers WHERE login = ?", (message.from_user.username,))
    if cursor.fetchone() is None:
        data = (message.from_user.username, message.from_user.id, message.chat.id, '')
        cursor.execute("INSERT INTO viewers VALUES (null, ?, ?, ?, ?);", data)
        db.commit()
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = rubricator_data['result']['children']

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = create_inline_buttons(categories)
    keyboard.add(*buttons)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler()
async def inline_button_callback(query: types.CallbackQuery, state: FSMContext):
    category_id = int(query.data)

    # –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ JSON-–¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
    def find_category_by_id(category_id, data):
        for item in data:
            if item['id'] == category_id:
                return item
            if 'children' in item:
                result = find_category_by_id(category_id, item['children'])
                if result:
                    return result
        return None

    category = find_category_by_id(category_id, rubricator_data['result']['children'])

    if category:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if 'children' in category:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            buttons = create_inline_buttons(category['children'])
            keyboard.add(*buttons)

            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await query.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard)
        else:
            # –í—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–µ—á–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω—É–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            navigation_attributes = category['navigation'].get('attributes', [])
            attribute_values = ', '.join(str(attr['value']) for attr in navigation_attributes)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            category_chain = []
            current_category = category
            while current_category:
                category_chain.insert(0, current_category['title'])
                parent_id = current_category.get('parentId')
                current_category = find_category_by_id(parent_id, rubricator_data['result']['children'])

            category_chain_text = ' - '.join(category_chain)

            answer_text = f'–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_chain_text}, –∞—Ç—Ä–∏–±—É—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {attribute_values}'
            await query.answer(answer_text)

    # –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ CallbackQuery, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    await query.answer()



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)

